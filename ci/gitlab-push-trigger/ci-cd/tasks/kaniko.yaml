apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/version: "0.6"
    5g-core.casa-systems.com/taskType: build
    app.kubernetes.io/component: tekton-task
    app.kubernetes.io/managed-by: kpt
    app.kubernetes.io/part-of: axyomcore-portal
    app: axyom-backstage-provider-tekton
    app.kubernetes.io/name: axyom-backstage-provider-tekton
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le"
spec:
  description: "This Task builds a simple Dockerfile with kaniko and pushes to a registry. This Task stores the image name and digest as results, allowing Tekton Chains to pick up that an image was built & sign it."
  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
      # gcr.io/kaniko-project/executor:v1.21.0-slim@sha256:c05f7934c17cac857e5eaa527be3e4b479f57ec28cecb5cd105e23544af487ad
      # gcr.io/kaniko-project/executor:v1.8.0@sha256:ff98af876169a488df4d70418f2a60e68f9e304b2e68d5d3db4c59e7fdc3da3c
      # default: gcr.io/kaniko-project/executor:v1.8.1-slim@sha256:befa11c3531a8c4dab403250c4ce8d770a6b3097054a7d924802d340e687851c
      # default: gcr.io/kaniko-project/executor:v1.9.1-slim@sha256:be284f81d7f442b6c6d94b341d8068e42291d97bcbeb2c7ecb48a46b7051d662
      # default: gcr.io/kaniko-project/executor:v1.9.2-slim@sha256:8c20cfe5a461c7c40829617a429d7b97b4a9a0c21564f0ff2db634247b63627c
      # default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    ## use for debugging
    ##
    # - name: check-kaniko
    #   workingDir: $(workspaces.source.path)
    #   image: docker.artifactory.casa-systems.com/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
    #   script: |
    #     set -e

    #     pwd
    #     echo "list all"
    #     ls -l

    #     cd /kaniko 

    #     echo "Check .docker"
    #     ls -al .docker/

    #     cat .docker/config.json
    #     echo "list all"
    #     ls -l
    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      args:
        - $(params.EXTRA_ARGS)
        - --dockerfile=$(params.DOCKERFILE)
        - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
        - --destination=$(params.IMAGE)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
      computeResources:
        requests:
          memory: 1Gi
          cpu: 200m
        limits:
          memory: 2Gi
          cpu: 500m
    - name: write-url
      image: docker.artifactory.casa-systems.com/library/bash:5.1.4@sha256:c523c636b722339f41b6a431b44588ab2f762c5de5ec3bd7964420ff982fb1d9
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
